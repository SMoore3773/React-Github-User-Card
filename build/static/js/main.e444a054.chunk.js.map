{"version":3,"sources":["components/FollowerCard.js","components/UserCard.js","App.js","serviceWorker.js","index.js"],"names":["FollowerBox","styled","div","FollowerImg","img","FollowerHeader","h3","FollowerLilnk","a","FollowerCard","props","console","log","onClick","setSearchUser","login","className","alt","src","pic","href","html_url","UserContainer","UserBox","UserHeader","h1","UserImg","UserInfo","UserText","UserBio","p","UserHandle","UserLink","UserRepos","FollowersBox","h2","FollowerCards","UserCard","user","name","avatar_url","bio","public_repos","followers","map","fol","key","id","Application","App","state","searchUser","handleUserChange","setState","fetch","this","then","response","json","res","catch","err","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e444a054.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\n\nconst FollowerCard = props => {\n\n    //console log tracking props in FollowerCard\n    console.log('FollowerCard: props',props)\n\n    return (\n        <FollowerBox onClick={() => props.setSearchUser(props.login)}>\n            \n            <FollowerImg className='followImg' alt='follower' src={props.pic} />\n            <FollowerHeader className='followerLogin'>{props.login}</FollowerHeader>\n            <FollowerLilnk className='followerLink' href={props.html_url} >{props.html_url}</FollowerLilnk>\n\n        </FollowerBox>\n    )\n}\n\n//styling for FollowerCard using styled Components\n\nconst FollowerBox = styled.div`\ndisplay:flex;\nflex-direction:column;\nbox-sizing:border-box;\nborder-radius: 1rem;\n/* border: solid black 1px; */\npadding: 1.5rem;\nbox-shadow: .25rem .25rem .5rem #0D4956;\nmargin: 1.5rem;\nborder: solid 1.5px #1CD2FC;\n&:hover{\n    border: solid 1.5px #fcaf46;\n    box-shadow: .25rem .25rem .5rem #fcaf46;\n}\n`\nconst FollowerImg = styled.img`\nwidth: 250px;\nborder-radius: .25rem;\nbox-shadow:.2rem .2rem .5rem black;\n`\nconst FollowerHeader = styled.h3`\nfont-size:1.5rem;\ntext-align: center;\n`\nconst FollowerLilnk = styled.a`\nfont-size: .75rem;\ntext-align: center;\ncolor: black;\ntext-decoration: none;\n&:hover{\n    text-decoration: underline;\n}\n`\nexport default FollowerCard;","import React from 'react';\nimport FollowerCard from './FollowerCard';\nimport styled from 'styled-components';\n\nconst UserCard = props => {\n\n//console.log tracking incoming props into UserCard\nconsole.log('UserCard: props',props)\n    \nreturn(\n        <UserContainer className='userContainer'>\n            <UserBox  className='userCard'>\n                <UserHeader className='userHeader'>{props.user.name}</UserHeader>\n                <UserInfo>\n                    <UserImg className='userImg' alt='user' src={props.user.avatar_url}/>\n                    <UserText>\n                        <UserBio className='userBio'>{props.user.bio}</UserBio>\n                        <UserHandle className='userHandle'>GitHub Handle: {props.user.login}</UserHandle>\n                        <UserLink  className='userLink' href={props.user.html_url}>{props.user.html_url}</UserLink>\n                        <UserRepos className='userRepo'>Public Repo's: {props.user.public_repos}</UserRepos>\n                    </UserText>\n                </UserInfo>\n            </UserBox>\n            <FollowersBox className='followerContainer'>\n                <FollowerHeader className='userFollwerHeader'>Followers</FollowerHeader>\n                <FollowerCards className='followerCards'>\n                    {props.followers.map(fol => \n                    <FollowerCard\n                     setSearchUser={user => props.setSearchUser(user)}  \n                     key={fol.id} \n                     login={fol.login} \n                     pic={fol.avatar_url} \n                     html_url={fol.html_url} \n                     />)}\n                </FollowerCards>\n            </FollowersBox>\n        </UserContainer>\n    )\n}\n\n//styling definitions with styled components\n\nconst UserContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\n`\nconst UserBox = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: flex-start;\nmargin: 2rem;\nborder-radius: 2rem;\nbox-shadow: .5rem .5rem 1rem black;\nbackground-color: white;\n`\nconst UserHeader = styled.h1`\ntext-align: center;\nfont-size: 5rem;\ncolor: rgba(29,210,253,1);\nbackground: rgb(73,50,19);\nbackground: linear-gradient(0deg, rgba(73,50,19,1) 0%, rgba(252,176,69,1) 5%);\ntext-shadow: .2rem .2rem .5rem #251133;\npadding:2rem;\nmargin-top: 0rem;\nborder-top-left-radius: 2rem;\nborder-top-right-radius:2rem;\n`\nconst UserImg = styled.img`\nmargin: 1rem;\nwidth:35%;\nborder: solid 1.5px #FCAF46;\nborder-radius:.5rem;\nbox-shadow:.2rem .2rem .5rem #FCAF46;\n`\nconst UserInfo = styled.div`\ndisplay:flex;\nflex-direction:row;\njustify-content: space-evenly;\npadding:2rem;\nmargin:1rem;\nalign-content: center;\n`\nconst UserText = styled.div`\ndisplay:flex;\nflex-direction:column;\njustify-content: center;\nfont-size: 1.25rem;\nwidth: 35%;\n`\nconst UserBio = styled.p`\nmargin: 1rem;\nfont-size: 1.25rem;\n`\nconst UserHandle = styled.p`\nmargin: 1rem;\nfont-size: 1rem;\n`\nconst UserLink = styled.a`\nmargin: 1rem;\nfont-size: 1rem;\ntext-decoration:none;\ncolor:black;\n&:hover{\n    text-decoration:underline;\n}\n&:visited{\n    color:black;\n}\n`\nconst UserRepos = styled.p`\nmargin: 1rem;\nfont-size: 1rem;\n`\nconst FollowersBox = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: flex-start;\nmargin: 2rem 4rem 2rem 4rem;\nborder-radius: 2rem;\nbox-shadow: .5rem .5rem 1rem black;\nbackground-color: white;\n`\nconst FollowerHeader = styled.h2`\ntext-align: center;\nfont-size:3.5rem;\ncolor: #fcaf46;\nbackground: rgba(29,210,253,1);\nbackground: linear-gradient(0deg, rgba(14,84,99,1)0%, rgba(29,210,253,1) 5%);\ntext-shadow: .2rem .2rem .5rem #251133;\npadding:2rem;\nmargin-top: 0rem;\nborder-top-left-radius: 2rem;\nborder-top-right-radius:2rem;\n`\nconst FollowerCards = styled.div`\ndisplay: flex;\nflex-direction:row;\nflex-wrap:wrap;\njustify-content: space-evenly;\npadding:2rem;\nmargin:1rem;\n`\nexport default UserCard; ","import React from 'react';\nimport UserCard from './components/UserCard';\nimport styled from 'styled-components';\n\n//styling for app background \nconst Application = styled.div`\nbackground: rgb(131,58,180);\nbackground: linear-gradient(15deg, rgba(131,58,180,1) 0%, rgba(29,210,253,1) 36%, rgba(252,176,69,1) 100%);\n`\n\nclass App extends React.Component {\n    //setup initial state\n    state= {\n      searchUser:'SMoore3773',\n      user: {},\n      followers: []\n    }\n   componentDidMount() {\n\n    //api request for initial user\n    fetch(`https://api.github.com/users/${this.state.searchUser}`)\n    .then(response => response.json())\n    .then(res => this.setState({user: res}))\n    .catch(err => console.log('catch error in api req',err))\n\n    //api request for initial user's followers\n    fetch(`https://api.github.com/users/${this.state.searchUser}/followers`)\n    .then(res => res.json())\n    .then(res => this.setState({followers: res}))\n    .catch(err => console.log('catch error in api followers req',err))\n  }\n\n componentDidUpdate(){\n    //dependency for CDU to prevent infinite loop\n     if(this.state.searchUser !== this.state.user.login){\n\n    //fetch for updated search user\n     fetch(`https://api.github.com/users/${this.state.searchUser}`)\n     .then(response => response.json())\n     .then(res => this.setState({user: res}))\n     .catch(err => console.log('catch error in api req',err))\n\n     //fetch for updated search user's followers\n     fetch(`https://api.github.com/users/${this.state.searchUser}/followers`)\n     .then(res => res.json())\n     .then(res => this.setState({followers: res}))\n     .catch(err => console.log('catch error in api followers req',err))\n    }\n }\n \n//change handle function for setting new user---> used in onClick in FollowerCard\nhandleUserChange = user => {\n  this.setState({...this.state, searchUser : user})\n  console.log('app.js: user in handleuserchange',user)\n}\n    render() {\n\n      // Console logs for tracking state information\n      console.log('App.js: render: this.state.user', this.state.user)\n      console.log('App.js: render: this.state.followers', this.state.followers)\n      console.log('App.js: render: this.state.searchuser', this.state.searchUser)\n      \n      return (\n        \n        <Application className=\"App\">\n          <UserCard \n          user = {this.state.user}\n          followers = {this.state.followers}\n          setSearchUser={user => this.handleUserChange(user)}\n          />\n         \n        </Application>\n    );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}